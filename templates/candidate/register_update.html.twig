{% extends 'base.html.twig' %}

{% block title %}{{ candidate.id ? 'Mettre à jour' : 'Inscription' }} du candidat{% endblock %}

{% block body %}
<div class="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">
  <div class="relative py-3 sm:max-w-xl sm:mx-auto">
    <div class="relative px-4 py-10 bg-white mx-8 md:mx-0 shadow rounded-3xl sm:p-10">
      <div class="max-w-md mx-auto">
        <div class="flex items-center space-x-5">
          <div class="h-14 w-14 bg-yellow-200 rounded-full flex flex-shrink-0 justify-center items-center text-yellow-500 text-2xl font-mono">i</div>
          <div class="block pl-2 font-semibold text-xl self-start text-gray-700">
            <h2 class="leading-relaxed">{{ candidate.id ? 'Mettre à jour vos informations' : 'Inscription du candidat' }}</h2>
            <p class="text-sm text-gray-500 font-normal leading-relaxed">Remplissez le formulaire ci-dessous pour {{ candidate.id ? 'mettre à jour vos informations' : 'vous inscrire' }}.</p>
          </div>
        </div>
        
        {# Affichage des messages flash #}
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="bg-{{ label == 'error' ? 'red' : 'green' }}-100 border border-{{ label == 'error' ? 'red' : 'green' }}-400 text-{{ label == 'error' ? 'red' : 'green' }}-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <span class="block sm:inline">{{ message }}</span>
                </div>
            {% endfor %}
        {% endfor %}
        
        <div class="divide-y divide-gray-200">
          <div class="py-8 text-base leading-6 space-y-4 text-gray-700 sm:text-lg sm:leading-7">
            {{ form_start(form, {'attr': {'class': 'space-y-6', 'id': 'multi-step-form'}}) }}
              
              {# Étape 1: Informations de paiement #}
              <div id="step1" class="form-step">
                <h3 class="text-lg font-medium mb-4">Étape 1: Informations de paiement</h3>
                <div class="mb-4">
                    {{ form_label(form.transactionNumber, 'Numéro de transaction', {'label_attr': {'class': 'block text-gray-700 text-sm font-bold mb-2'}}) }}
                    {{ form_widget(form.transactionNumber, {'attr': {'class': 'w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600'}}) }}
                    {{ form_errors(form.transactionNumber, {'attr': {'class': 'text-red-500 text-xs mt-1'}}) }}
                </div>
                <div class="mb-4">
                    {{ form_label(form.payementReceipt, 'Reçu de paiement', {'label_attr': {'class': 'block text-gray-700 text-sm font-bold mb-2'}}) }}
                    {{ form_widget(form.payementReceipt, {'attr': {'class': 'w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600'}}) }}
                    {{ form_errors(form.payementReceipt, {'attr': {'class': 'text-red-500 text-xs mt-1'}}) }}
                </div>
                <button type="button" class="next-step bg-blue-500 text-white px-4 py-2 rounded-md mt-4">Suivant</button>
              </div>

              {# Étape 2: Informations personnelles #}
              <div id="step2" class="form-step hidden">
                <h3 class="text-lg font-medium mb-4">Étape 2: Informations personnelles</h3>
                {% for field in ['name', 'sexe', 'dateOfBirth', 'placeOfBirth', 'nationality', 'cni', 'phoneNumber', 'email', 'photo'] %}
                    <div class="mb-4">
                        {{ form_label(form[field], null, {'label_attr': {'class': 'block text-gray-700 text-sm font-bold mb-2'}}) }}
                        {{ form_widget(form[field], {'attr': {'class': 'w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600'}}) }}
                        {{ form_errors(form[field], {'attr': {'class': 'text-red-500 text-xs mt-1'}}) }}
                    </div>
                {% endfor %}
                <button type="button" class="prev-step bg-gray-300 text-gray-700 px-4 py-2 rounded-md mt-4 mr-2">Précédent</button>
                <button type="button" class="next-step bg-blue-500 text-white px-4 py-2 rounded-md mt-4">Suivant</button>
              </div>

              {# Étape 3: Autres informations #}
              <div id="step3" class="form-step hidden">
                <h3 class="text-lg font-medium mb-4">Étape 3: Autres informations</h3>
                {% for field in ['region', 'depertement', 'field', 'examinationCenter', 'certificate', 'certificateYear', 'language'] %}
                    <div class="mb-4">
                        {{ form_label(form[field], null, {'label_attr': {'class': 'block text-gray-700 text-sm font-bold mb-2'}}) }}
                        {{ form_widget(form[field], {'attr': {'class': 'w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600'}}) }}
                        {{ form_errors(form[field], {'attr': {'class': 'text-red-500 text-xs mt-1'}}) }}
                    </div>
                {% endfor %}
                <button type="button" class="prev-step bg-gray-300 text-gray-700 px-4 py-2 rounded-md mt-4 mr-2">Précédent</button>
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-md mt-4">{{ candidate.id ? 'Mettre à jour' : 'S\'inscrire' }}</button>
              </div>

              <div class="pt-4 flex items-center space-x-4">
                <button type="button" id="save-progress" class="bg-green-500 flex justify-center items-center w-full text-white px-4 py-3 rounded-md focus:outline-none hover:bg-green-600">
                  Sauvegarder la progression
                </button>
              </div>
            {{ form_end(form) }}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', (event) => {
    const form = document.getElementById('multi-step-form');
    const steps = Array.from(document.getElementsByClassName('form-step'));
    const nextButtons = Array.from(document.getElementsByClassName('next-step'));
    const prevButtons = Array.from(document.getElementsByClassName('prev-step'));
    const saveButton = document.getElementById('save-progress');
    let currentStep = 0;

    function showStep(stepIndex) {
        steps.forEach((step, index) => {
            if (index === stepIndex) {
                step.classList.remove('hidden');
            } else {
                step.classList.add('hidden');
            }
        });
    }

    function saveProgress() {
        const formData = new FormData(form);
        const data = {};
        for (let [key, value] of formData.entries()) {
            if (form.elements[key].type !== 'file') {
                data[key] = value;
            }
        }
        data['currentStep'] = currentStep;
        
        document.cookie = `candidateFormProgress=${JSON.stringify(data)}; path=/; max-age=604800; SameSite=Strict; Secure`;
        alert('Progression sauvegardée avec succès!');
    }

    function loadProgress() {
        const cookies = document.cookie.split(';');
        const progressCookie = cookies.find(cookie => cookie.trim().startsWith('candidateFormProgress='));
        
        if (progressCookie) {
            const progressData = JSON.parse(progressCookie.split('=')[1]);
            Object.keys(progressData).forEach(key => {
                if (key !== 'currentStep') {
                    const field = form.elements[key];
                    if (field && field.type !== 'file') {
                        field.value = progressData[key];
                    }
                }
            });
            currentStep = parseInt(progressData.currentStep) || 0;
            showStep(currentStep);
        }
    }

    nextButtons.forEach(button => {
        button.addEventListener('click', () => {
            currentStep++;
            showStep(currentStep);
            saveProgress();
        });
    });

    prevButtons.forEach(button => {
        button.addEventListener('click', () => {
            currentStep--;
            showStep(currentStep);
            saveProgress();
        });
    });

    saveButton.addEventListener('click', saveProgress);

    // Charger la progression sauvegardée au chargement de la page
    loadProgress();
});
</script>

{% endblock %}